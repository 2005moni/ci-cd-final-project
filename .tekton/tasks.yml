---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  workspaces:
    - name: source
  steps:
    - name: cleanup
      image: alpine:3.14
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        echo "Cleaning up workspace..."
        rm -rf *

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        nosetests $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-task
spec:
  params:
    - name: IMAGE
      type: string
      description: The image to build and push.
    - name: CONTEXT
      type: string
      default: .
      description: Path to the build context.
  workspaces:
    - name: source
  steps:
    - name: build
      image: quay.io/buildah/stable:v1.23.3
      securityContext:
        privileged: true
      script: |
        #!/bin/sh
        set -e
        echo "ðŸš€ Building image $(params.IMAGE)"
        buildah bud --tls-verify=false -f $(workspaces.source.path)/Dockerfile -t $(params.IMAGE) $(params.CONTEXT)
        echo "âœ… Build completed"
    - name: push
      image: quay.io/buildah/stable:v1.23.3
      securityContext:
        privileged: true
      script: |
        #!/bin/sh
        set -e
        echo "ðŸ“¤ Pushing image $(params.IMAGE)"
        buildah push --tls-verify=false $(params.IMAGE)
        echo "âœ… Push completed"
        
---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-using-oc
spec:
  params:
    - name: app-name
      type: string
    - name: build-image
      type: string
  steps:
    - name: deploy
      image: 'quay.io/openshift/origin-cli:latest'
      script: |
        #!/bin/bash
        echo "Deploying app $(params.app-name) with image $(params.build-image)"

        oc create deployment $(params.app-name) \
          --image=$(params.build-image) \
          --dry-run=client -o yaml | oc apply -f -

        # expose the service so itâ€™s accessible
        oc expose deployment $(params.app-name) --port=8080 || true
        oc expose svc/$(params.app-name) || true


